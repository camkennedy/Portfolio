pValue < 0.05
#Now let's replicate it several times and see how many times it detects the difference.
intSampSize = 100
intNumReps <- 1000
pValsNull <- replicate(intNumReps, RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05))
numDetected <- sum(pValsNull) / intNumReps
numDetected
#Finally, let's generate "power curves" from replicating this simulation with various
#effect sizes and N-sizes
vecSampSizeTrials <- c(25, 50, 100, 250, 500, 1000)
#vecSampSizeTrials <- c(25, 50)
vecNormShiftTrials <- c(0.25, 0.5, 0.75, 1, 1.5, 2)
#vecNormShiftTrials <- c(0.25, 0.5)
#Start a data table with just our sample sizes (we'll fill in the rest as the experiment churns)
dtResults <- data.table('NumResponses'=vecSampSizeTrials)
dtResults
#Poor man's Grid Search to generate results ...
for (numNormShift in vecNormShiftTrials){
vecResults <- c(0) #Just a dummy value
for (intSampSize in vecSampSizeTrials){
vecProbT <- NormalizeMass(dnorm((vecCenteredNums-numNormShift) * numNormSpike))
pValsNull <- replicate(intNumReps, RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05))
numDetected <- sum(pValsNull) / intNumReps
vecResults <- c(vecResults, numDetected)
}
print(vecResults[-1:-1])
dtResults[, paste('ATE',numNormShift,sep='') := vecResults[-1:-1] ]
}
dtResults
dtResults #Not sure why, but it takes calling this twice to see the results
#Save results to disk
fwrite(dtResults, 'dtResultsNormShift.csv')
# load packages
library(data.table)
library(MASS)
library(ggplot2)
### GENERATE DATA ###
# Create survey category options
vecPolBias <- c('1_Very Liberal','2_Somewhat Liberal','3_Slightly Liberal',
'4_Neutral','5_Slightly Conservative','6_Somewhat Conservative',
'7_Very Conservative')
# The numbers preceeding the response options preserving ordinality by
# forcing alpha-numeric order.
vecPolBias
#Dynamically retrieve number of categories, and also convert to a vector
intNumCategories <- length(vecPolBias)
intNumCategories
vecCategoryNums <- seq(intNumCategories)
vecCategoryNums
# #Convert to data table
# dtOptions <- data.table('BiasNum'=vecCategoryNums, 'BiasRating'=vecPolBias)
# dtOptions
#
# #Note, our bias number is just used in data generation.
# #It is not meant to imply linearity between categories,
# #as doing so would defeat their ordinal-only nature.
# Set our probabilities of selecting responses
#We'll start with a uniform distribution (equal odds of selecting any response)
#Set probs for being in CONTROL GROUP
vecProbC <- rep(1/intNumCategories, intNumCategories) #Control probs.
vecProbC
#Set probs for being in TREATMENT GROUP
vecProbT <- vecProbC  #Treatment probs. Set the same, identical distributions
vecProbT
#Now let's run a quick observational test to see if we can generate random uniform choices
#... commenting out
#sample(x=vecPolBias, size=10, prob=vecProbC, replace=TRUE)
#sample(x=vecPolBias, size=10, prob=vecProbT, replace=TRUE)
#Let's further test by generating a larger sample and observing their frequency
intSampSize <- 100000
vecSampleDataC <- sample(x=vecPolBias, size=intSampSize, prob=vecProbC, replace=TRUE)
vecSampleDataT <- sample(x=vecPolBias, size=intSampSize, prob=vecProbT, replace=TRUE)
vecSampleData <- c(vecSampleDataC, vecSampleDataT)
dt <- data.table('outcome'=vecSampleData,
'treat'=c(rep(0, intSampSize), rep(1, intSampSize))
)
dt[, .N / intSampSize, keyby=.(treat,outcome)]
#Yup, it works!
#Quick peek at our data ... looks good ... commenting out
#dt[sample(.N,10)]
#Finally, we'll make a function so we can repeatedly randomly generate this data
GenRandData <- function(intSampSize, vecProbC, vecProbT) {
vecSampleDataC <- sample(x=vecPolBias, size=intSampSize, prob=vecProbC, replace=TRUE)
vecSampleDataT <- sample(x=vecPolBias, size=intSampSize, prob=vecProbT, replace=TRUE)
vecSampleData <- c(vecSampleDataC, vecSampleDataT)
return(data.table('outcome'=vecSampleData,
'treat'=c(rep(0, intSampSize), rep(1, intSampSize))
)
)
}
#Test our function ... it works ... commenting out
#test <- GenRandData(intSampSize, vecProbC, vecProbT)
#test[sample(.N,10)]
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
#Now we'll wrap the above stuff in a function so we can replicate it
RepPVals <- function(intSampSize, vecProbC, vecProbT, pThresh=0.05) {
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
tValue <- coef(summary(m))['treat', 't value']
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
#return(pValue)
return(pValue < pThresh)
}
#Test the function
RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05)
#Now we replicate the function a bunch of times!
intSampSize = 500
intNumReps <- 1000
pValsNull <- replicate(intNumReps, RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05))
numDetected <- sum(pValsNull) / intNumReps
numDetected
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
#Now we'll wrap the above stuff in a function so we can replicate it
RepPVals <- function(intSampSize, vecProbC, vecProbT, pThresh=0.05) {
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
tValue <- coef(summary(m))['treat', 't value']
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
#return(pValue)
return(pValue < pThresh)
}
#Test the function
RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05)
#Now we replicate the function a bunch of times!
intSampSize = 500
intNumReps <- 1000
pValsNull <- replicate(intNumReps, RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05))
numDetected <- sum(pValsNull) / intNumReps
numDetected
#Now we'll wrap the above stuff in a function so we can replicate it
RepPVals <- function(intSampSize, vecProbC, vecProbT, pThresh=0.05) {
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
tValue <- coef(summary(m))['treat', 't value']
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
#return(pValue)
return(pValue < pThresh)
}
#Test the function
RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05)
#Now we replicate the function a bunch of times!
intSampSize = 500
intNumReps <- 1000
pValsNull <- replicate(intNumReps, RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05))
numDetected <- sum(pValsNull) / intNumReps
numDetected
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
vecProbC
vecProbT
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 500
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 5000
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 5000
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 5000
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 5000
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 5000
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 50000
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
exp(.2)
exp(-.2)
exp(-0.001939)
exp(-1.7988)
exp(-0.2335)
1/exp(-0.2335)
exp(0.2335)
### UNIFORM SHIFTED DISTRIBUTION, GENERATION ###
#Uniform Shifted Responses
numShiftFactor <- 0.05
vecProbT <- vecProbC + c(-numShiftFactor,0,0,0,0,0,numShiftFactor)
vecProbT
#Let's visually compare our control and treatment distrubitons
#We'll create a function to do this here that we'll call later as well
PlotDists <- function(vecProbC, vecProbT, strSubtitle='') {
dtPlot <- data.table('Response'=c(vecPolBias, vecPolBias),
'Assignment'=c(rep('Control',length(vecPolBias)),
rep('Treatment',length(vecPolBias))),
'Probability'=c(vecProbC, vecProbT)
)
ggplot(data=dtPlot, aes(x=Response, y=Probability, col=Assignment, group=Assignment)) +
geom_line()+
geom_point()+
ggtitle(paste('Probability Mass Function\n',strSubtitle,sep='')) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
}
PlotDists(vecProbC, vecProbT, 'Uniform (Control) vs. Uniform Shifted Response (Treatment)')
# load packages
library(data.table)
library(MASS)
library(ggplot2)
### GENERATE DATA ###
# Create survey category options
vecPolBias <- c('1_Very Liberal','2_Somewhat Liberal','3_Slightly Liberal',
'4_Neutral','5_Slightly Conservative','6_Somewhat Conservative',
'7_Very Conservative')
# The numbers preceeding the response options preserving ordinality by
# forcing alpha-numeric order.
vecPolBias
#Dynamically retrieve number of categories, and also convert to a vector
intNumCategories <- length(vecPolBias)
intNumCategories
vecCategoryNums <- seq(intNumCategories)
vecCategoryNums
# #Convert to data table
# dtOptions <- data.table('BiasNum'=vecCategoryNums, 'BiasRating'=vecPolBias)
# dtOptions
#
# #Note, our bias number is just used in data generation.
# #It is not meant to imply linearity between categories,
# #as doing so would defeat their ordinal-only nature.
# Set our probabilities of selecting responses
#We'll start with a uniform distribution (equal odds of selecting any response)
#Set probs for being in CONTROL GROUP
vecProbC <- rep(1/intNumCategories, intNumCategories) #Control probs.
vecProbC
#Set probs for being in TREATMENT GROUP
vecProbT <- vecProbC  #Treatment probs. Set the same, identical distributions
vecProbT
#Now let's run a quick observational test to see if we can generate random uniform choices
#... commenting out
#sample(x=vecPolBias, size=10, prob=vecProbC, replace=TRUE)
#sample(x=vecPolBias, size=10, prob=vecProbT, replace=TRUE)
#Let's further test by generating a larger sample and observing their frequency
intSampSize <- 100000
vecSampleDataC <- sample(x=vecPolBias, size=intSampSize, prob=vecProbC, replace=TRUE)
vecSampleDataT <- sample(x=vecPolBias, size=intSampSize, prob=vecProbT, replace=TRUE)
vecSampleData <- c(vecSampleDataC, vecSampleDataT)
dt <- data.table('outcome'=vecSampleData,
'treat'=c(rep(0, intSampSize), rep(1, intSampSize))
)
dt[, .N / intSampSize, keyby=.(treat,outcome)]
#Yup, it works!
#Quick peek at our data ... looks good ... commenting out
#dt[sample(.N,10)]
#Finally, we'll make a function so we can repeatedly randomly generate this data
GenRandData <- function(intSampSize, vecProbC, vecProbT) {
vecSampleDataC <- sample(x=vecPolBias, size=intSampSize, prob=vecProbC, replace=TRUE)
vecSampleDataT <- sample(x=vecPolBias, size=intSampSize, prob=vecProbT, replace=TRUE)
vecSampleData <- c(vecSampleDataC, vecSampleDataT)
return(data.table('outcome'=vecSampleData,
'treat'=c(rep(0, intSampSize), rep(1, intSampSize))
)
)
}
#Test our function ... it works ... commenting out
#test <- GenRandData(intSampSize, vecProbC, vecProbT)
#test[sample(.N,10)]
### POWER TESTS ###
#We'll first generate a model along with some summary stats
#that eventually results in a p-Value.
intSampSize = 50000  #Very large sample produces consistent model
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
summary(m)
tValue <- coef(summary(m))['treat', 't value']
tValue
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
pValue
pValue < 0.05
#Now we'll wrap the above stuff in a function so we can replicate it
RepPVals <- function(intSampSize, vecProbC, vecProbT, pThresh=0.05) {
dt <- GenRandData(intSampSize, vecProbC, vecProbT)
m <- polr(as.factor(outcome) ~ treat, data = dt, Hess=TRUE)
tValue <- coef(summary(m))['treat', 't value']
pValue <- pnorm(abs(tValue), lower.tail=F) * 2
#return(pValue)
return(pValue < pThresh)
}
#Test the function
intSampSize = 500
RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05)
#Now we replicate the function a bunch of times!
intSampSize = 500
intNumReps <- 1000
pValsNull <- replicate(intNumReps, RepPVals(intSampSize, vecProbC, vecProbT, pThresh=0.05))
numDetected <- sum(pValsNull) / intNumReps
numDetected
### UNIFORM SHIFTED DISTRIBUTION, GENERATION ###
#Uniform Shifted Responses
numShiftFactor <- 0.05
vecProbT <- vecProbC + c(-numShiftFactor,0,0,0,0,0,numShiftFactor)
vecProbT
#Let's visually compare our control and treatment distrubitons
#We'll create a function to do this here that we'll call later as well
PlotDists <- function(vecProbC, vecProbT, strSubtitle='') {
dtPlot <- data.table('Response'=c(vecPolBias, vecPolBias),
'Assignment'=c(rep('Control',length(vecPolBias)),
rep('Treatment',length(vecPolBias))),
'Probability'=c(vecProbC, vecProbT)
)
ggplot(data=dtPlot, aes(x=Response, y=Probability, col=Assignment, group=Assignment)) +
geom_line()+
geom_point()+
ggtitle(paste('Probability Mass Function\n',strSubtitle,sep='')) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
}
PlotDists(vecProbC, vecProbT, 'Uniform (Control) vs. Uniform Shifted Response (Treatment)')
### UNIFORM TILTED DISTRIBUTION GENERATION ###
#Uniform Tilted Responses
numMaxTiltFactor <- 0.05
vecProbT <- vecProbC + c(-numMaxTiltFactor,-numMaxTiltFactor*2/3,-numMaxTiltFactor*1/3,0,
numMaxTiltFactor*1/3,numMaxTiltFactor*2/3,numMaxTiltFactor)
vecProbT
#Visually compare our control and treatment distrubitons
PlotDists(vecProbC, vecProbT, 'Uniform (Control) vs. Uniform Shifted Response (Treatment)')
### NORMAL SHIFTED DISTRIBUTION GENERATION ###
#First create the control group distribution
vecCenteredNums <- vecCategoryNums - 4 #Centers 'neutral' category at 0
numNormSpike <- 0.7  #Adjusts the 'spikiness' of the normal distribution, higher is spikier
numNormShift <- 1  #Adjusts the shift of the treatment group
#Quick function to normalize the probability mass to sum to 1
NormalizeMass <- function(distIn) {
return(distIn/sum(distIn))
}
vecProbC <- NormalizeMass(dnorm((vecCenteredNums-0) * numNormSpike))
vecProbC
#Create the treatment group distribution
vecProbT <- NormalizeMass(dnorm((vecCenteredNums-numNormShift) * numNormSpike))
vecProbT
#Visually compare our control and treatment distrubitons
PlotDists(vecProbC, vecProbT, 'Normal (Control) vs. Normal Shifted Response (Treatment)')
